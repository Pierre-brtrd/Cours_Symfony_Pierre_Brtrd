name: Full CI process for Symfony 6
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  symfony:
    name: Symfony 6 (PHP ${{ matrix.php-versions }})
    # https://hub.docker.com/_/ubuntu/
    runs-on: ubuntu-20.04
    services:
      # https://docs.docker.com/samples/library/mysql/
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: true
      matrix:
        php-versions: ["8.1"]
    steps:
      # —— Setup Github actions 🐙 —————————————————————————————————————————————
      # https://github.com/actions/checkout (official)
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, fileinfo
        env:
          update: true

      - name: Check PHP Version
        run: php -v

      ## —— Yarn 🐱 ————————————————————————————————————————————————————————————
      - name: Yarn install
        uses: actions/setup-node@v2
        with:
          node-version: "18"
          #registry-url: npm.fontawesome.com
      - run:
          yarn install
          #env:
        #NODE_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - name: Yarn build
        run: yarn run encore production

      # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install

      # —— Symfony 🎵 ——————————————————————————————————————————————————————————
      - name: Check Symfony requirements
        run: vendor/bin/requirements-checker

      - name: Check the Symfony console
        run: |
          bin/console about

      ## —— Coding standards ✨ ————————————————————————————————————————————————
      - name: Coding standards checks (php_codesniffer + php-cs-fixer)
        run: vendor/bin/php-cs-fixer fix src
        if: matrix.php-versions == '8.0'

      ## -- Unit Test analysis ✨ —————————————————————————————————————————————————
      - name: PHPUnit test for unit test application
        run: |
          bin/console doctrine:database:create --env=test
          bin/console doctrine:schema:update --env=test --force 
          bin/phpunit --testdox

      ## —— Static analysis ✨ —————————————————————————————————————————————————
      - name: Static analysis of PHP code (PHPStan) and Twig with Lint
        run: |
          bin/console about --env=prod
          vendor/bin/phpstan analyse -l 0 src tests
          bin/console lint:twig ./templates
